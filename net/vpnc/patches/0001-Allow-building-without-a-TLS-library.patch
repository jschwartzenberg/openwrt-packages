From ef35ed1aef6c96f57f6c1a99c3abe9b60f9240c6 Mon Sep 17 00:00:00 2001
From: Julius Schwartzenberg <julius.schwartzenberg@gmail.com>
Date: Sun, 15 Dec 2024 15:12:40 +0100
Subject: [PATCH] Allow building without a TLS library

---
 Makefile   | 16 ++++++++++++----
 src/vpnc.c | 15 ++++++++++++++-
 2 files changed, 26 insertions(+), 5 deletions(-)

diff --git a/Makefile b/Makefile
index 8873035..f98157e 100644
--- a/Makefile
+++ b/Makefile
@@ -44,19 +44,25 @@
 # GPL incompliant though.
 #OPENSSL_GPL_VIOLATION=yes
 
+ifneq ($(CRYPTO_NONE), yes)
+CRYPTO_SRC = src/crypto.c
+CRYPTO_BINS = test-crypto
 PKG_CONFIG ?= pkg-config
 CRYPTO_LDADD = $(shell $(PKG_CONFIG) --libs gnutls)
 CRYPTO_CFLAGS = $(shell $(PKG_CONFIG) --cflags gnutls) -DCRYPTO_GNUTLS
-CRYPTO_SRCS = src/crypto-gnutls.c
+CRYPTO_SRCS = $(CRYPTO_SRC) src/crypto-gnutls.c
 
 ifeq ($(OPENSSL_GPL_VIOLATION), yes)
 CRYPTO_LDADD = -lcrypto
 CRYPTO_CFLAGS = -DOPENSSL_GPL_VIOLATION -DCRYPTO_OPENSSL
-CRYPTO_SRCS = src/crypto-openssl.c
+CRYPTO_SRCS = $(CRYPTO_SRC) src/crypto-openssl.c
+endif
+else
+CRYPTO_CFLAGS = -DCRYPTO_NONE
 endif
 
-SRCS = src/sysdep.c src/vpnc-debug.c src/isakmp-pkt.c src/tunip.c src/config.c src/dh.c src/math_group.c src/supp.c src/decrypt-utils.c src/crypto.c $(CRYPTO_SRCS)
-BINS = vpnc cisco-decrypt test-crypto
+SRCS = src/sysdep.c src/vpnc-debug.c src/isakmp-pkt.c src/tunip.c src/config.c src/dh.c src/math_group.c src/supp.c src/decrypt-utils.c $(CRYPTO_SRCS)
+BINS = vpnc cisco-decrypt $(CRYPTO_BINS)
 OBJS = $(addsuffix .o,$(basename $(SRCS)))
 CRYPTO_OBJS = $(addsuffix .o,$(basename $(CRYPTO_SRCS)))
 BINOBJS = $(addsuffix .o,$(BINS))
@@ -101,8 +107,10 @@
 cisco-decrypt: src/cisco-decrypt.o src/decrypt-utils.o
 	$(CC) $(LDFLAGS) -o $(BUILDDIR)/$@ $^ $(LIBS)
 
+ifneq ($(CRYPTO_NONE), yes)
 test-crypto: src/sysdep.o src/test-crypto.o src/crypto.o $(CRYPTO_OBJS)
 	$(CC) $(LDFLAGS) -o $(BUILDDIR)/$@ $^ $(LIBS)
+endif
 
 .depend: $(SRCS) $(BINSRCS)
 	$(CC) -MM $(SRCS) $(BINSRCS) $(CFLAGS) $(CPPFLAGS) > $@
diff --git a/src/vpnc.c b/src/vpnc.c
index 840047b..8cd943e 100644
--- a/src/vpnc.c
+++ b/src/vpnc.c
@@ -28,7 +28,9 @@
 
 #include <gcrypt.h>
 
+#ifndef CRYPTO_NONE
 #include "crypto.h"
+#endif
 #include "sysdep.h"
 #include "config.h"
 #include "isakmp-pkt.h"
@@ -1391,12 +1393,14 @@ static void do_phase1_am_packet2(struct sa_block *s, const char *shared_key)
 		uint8_t *dh_shared_secret;
 		int seen_natd = 0, seen_natd_them = 0, seen_natd_us = 0;
 		int natt_draft = -1;
+#ifndef CRYPTO_NONE
 		crypto_ctx *cctx;
 		crypto_error *crerr = NULL;
 
 		cctx = crypto_ctx_new (&crerr);
 		if (crerr)
 			crypto_call_error(crerr);
+#endif
 
 		reject = 0;
 		r = parse_isakmp_packet(r_packet, r_length, &reject);
@@ -1579,6 +1583,7 @@ static void do_phase1_am_packet2(struct sa_block *s, const char *shared_key)
 				hash = rp;
 				break;
 			case ISAKMP_PAYLOAD_CERT:
+#ifndef CRYPTO_NONE
 				if (rp->u.cert.encoding == ISAKMP_CERT_X509_SIG) {
 					hex_dump("cert", rp->u.cert.data, rp->u.cert.length, NULL);
 
@@ -1589,6 +1594,9 @@ static void do_phase1_am_packet2(struct sa_block *s, const char *shared_key)
 					if (ret)
 						crypto_call_error(crerr);
 				}
+#else
+                error(1, 0, "Error: received a cert payload but vpnc is compiled without a TLS library.\n");
+#endif
 				break;
 			case ISAKMP_PAYLOAD_SIG:
 				sig = rp;
@@ -1816,7 +1824,7 @@ static void do_phase1_am_packet2(struct sa_block *s, const char *shared_key)
 			} else if (opt_auth_mode == AUTH_MODE_CERT ||
 					   opt_auth_mode == AUTH_MODE_HYBRID) {
 				hex_dump("received signature", sig->u.sig.data, sig->u.sig.length, NULL);
-
+#ifndef CRYPTO_NONE
 				ret = crypto_verify_chain(cctx,
 										  config[CONFIG_CA_FILE],
 										  config[CONFIG_CA_DIR],
@@ -1854,6 +1862,9 @@ static void do_phase1_am_packet2(struct sa_block *s, const char *shared_key)
 				/* END - Signature Verification */
 
 				free(rec_hash);
+#else
+                error(2, 0, "vpnc is compiled without a TLS library, AUTH_MODE_CERT/AUTH_MODE_HYBRID is not supported!\n");
+#endif
 			}
 
 			gcry_md_close(hm);
@@ -1993,7 +2004,9 @@ static void do_phase1_am_packet2(struct sa_block *s, const char *shared_key)
 		}
 
 		gcry_md_close(skeyid_ctx);
+#ifndef CRYPTO_NONE
 		crypto_ctx_free(cctx);
+#endif
 		free(dh_shared_secret);
 
 		/* Determine presence of NAT */
-- 
2.43.0

